syntax = "proto3";

// Administrative tasks in this service
service AdminService {
  // Creates a csv2json transformation project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {};

  // Add a field mapping to a project
  rpc AddOrUpdateMapping(AddOrUpdateMappingRequest) returns (AddOrUpdateMappingResponse) {};
}

//---------- commonly used messages ----------//

// Severity of an error
enum Severity {
  // A warning, OK to proceed
  WARN = 0;
  // Critical error, action has to be taken
  CRITICAL = 1;
  // Fatal error, an operator should be informed
  FATAL = 2;
}

// An operation has not run run smoothly
message Error {
  // A message denoting what happened
  string message = 1;
  // Severity of incident, see enum desacription
  Severity severity = 2;
  // Any additional - if any that is
  optional string additional_information = 3;
}

// What format to use
enum OutputType {
  // JSON output
  JSON = 0;
  // YAML output
  YAML = 1;
  // TOML output
  TOML = 2;
}

// Render as data type
enum FieldType {
  // a string
  STRING = 0;
  // an integer
  INT = 1;
  // A floating point value
  FLOAT = 2;
  // a boolean value
  BOOL = 3;
}

//---------- project messages ----------//

// All data to create a project
message CreateProjectRequest {
  // Name of the project
  string name = 1;
  // A description which can be used to display information
  optional string description = 2;

  reserved 3, 4, 5, 6, 7, 8, 9;

  // What rofmat to use (can be overriddeh in a run later)
  optional OutputType output_type = 14;
  // Access CSV fields by name
  optional bool named = 11;
  // Output an array
  optional bool array = 12;
  // If output is an array, how to call the property
  optional string nested_property_name = 13;
  // What separator is used in CSV
  optional string separator = 14;
}

// Result of creating a project
message CreateProjectResponse {
  // Any errors
  repeated Error errors = 1;
  // id if projecb was created
  optional string id = 2;
}

//---------- add mapping for project messages ----------//

// ColumnConfiguration is a simple mapping from column to proprty
message ColumnConfiguration {
  // Property to map to
  string property = 1;
  // data type to render
  FieldType type = 2;
}

// Add one or more mappings. If a mapping exists will be overwritten
message AddOrUpdateMappingRequest {
  // reference ro project
  string project = 1;
  // Mappings to add or update, string is tne column either by name (project is named) or index
  map<string, ColumnConfiguration> mappings = 2;
}

// Result of adding ot updating
message AddOrUpdateMappingResponse {
  // Any errors
  repeated Error errors = 1;
}