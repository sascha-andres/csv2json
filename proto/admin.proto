syntax = "proto3";

// Administrative tasks in this service
service AdminService {
  // Creates a csv2json transformation project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {};
 
  // Remove a project and all related data
  rpc RemoveProject(RemoveProjectRequest) returns (RemoveProjectResponse) {};

  // List projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {};

  // Add or update a field mapping to a project (or multiple)
  rpc AddOrUpdateMapping(AddOrUpdateMappingRequest) returns (AddOrUpdateMappingResponse) {};

  // Remove mapping(s)
  rpc RemoveMapping(RemoveMappingRequest) returns (RemoveMappingResponse) {};

  // List mappings for project
  rpc ListMappings(ListMappingsRequest) returns (ListMappingsResponse) {};

  // Add extra variables to reference in calculated fields
  rpc AddExtraVariable(AddExtraVariableRequest) returns (AddExtraVariableResponse) {};

  // Remove extra variables from project
  rpc RemoveExtraVariable(RemoveExtraVariableRequest) returns (RemoveExtraVariableResponse) {};

  // List extra variables for project
  rpc ListExtraVariables(ListExtraVariablesRequest) returns (ListExtraVariablesResponse) {};

  // Add or update one or more calculated fields
  rpc AddOrUpdateCalculatedFields(AddOrUpdateCalculatedFieldsRequest) returns (AddOrUpdateCalculatedFieldsResponse) {};

  // Remove one or more calculated fields
  rpc RemoveCalculatedFields(RemoveCalculatedFieldsRequest) returns (RemoveCalculatedFieldsResponse) {};
}

//---------- commonly used messages ----------//

// Severity of an error
enum Severity {
  // A warning, OK to proceed
  WARN = 0;
  // Critical error, action has to be taken
  CRITICAL = 1;
  // Fatal error, an operator should be informed
  FATAL = 2;
}

// An operation has not run run smoothly
message Error {
  // A message denoting what happened
  string message = 1;
  // Severity of incident, see enum desacription
  Severity severity = 2;
  // Any additional - if any that is
  optional string additional_information = 3;
}

// What format to use
enum OutputType {
  // JSON output
  JSON = 0;
  // YAML output
  YAML = 1;
  // TOML output
  TOML = 2;
}

// Render as data type
enum FieldType {
  // a string
  STRING = 0;
  // an integer
  INT = 1;
  // A floating point value
  FLOAT = 2;
  // a boolean value
  BOOL = 3;
}

//---------- project messages ----------//

// All data to create a project
message CreateProjectRequest {
  // Name of the project
  string name = 1;
  // A description which can be used to display information
  optional string description = 2;

  reserved 3, 4, 5, 6, 7, 8, 9;

  // What rofmat to use (can be overriddeh in a run later)
  optional OutputType output_type = 10;
  // Access CSV fields by name
  optional bool named = 11;
  // Output an array
  optional bool array = 12;
  // If output is an array, how to call the property
  optional string nested_property_name = 13;
  // What separator is used in CSV
  optional string separator = 14;
}

// Result of creating a project
message CreateProjectResponse {
  // Any errors
  repeated Error errors = 1;
  // id if projecb was created
  optional string id = 2;
}

//---------- remove project ----------//

// Remove a project and all related data
message RemoveProjectRequest {
  // reference to project
  string project = 1;
}

// Result of removal
message RemoveProjectResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- list projects ----------//

// Data returned per project for a list request
message ListProjectData {
  // uniqud identifier
  string id = 1;
  // Name of project
  string name = 2;
  // Description for more information
  optional string description = 3;
}

// Request to get all projects
message ListProjectsRequest {
}

// List of projects
message ListProjectsResponse {
  // Any errors
  repeated Error errors = 1;
  // Projects known
  repeated ListProjectData projects = 2;
}

//---------- add mapping(s) for project messages ----------//

// ColumnConfiguration is a simple mapping from column to proprty
message ColumnConfiguration {
  // Property to map to
  string property = 1;
  // data type to render
  FieldType type = 2;
}

// Add one or more mappings. If a mapping exists will be overwritten
message AddOrUpdateMappingRequest {
  // reference to project
  string project = 1;
  // Mappings to add or update, string is the column either by name (project is named) or index
  map<string, ColumnConfiguration> mappings = 2;
}

// was mapping added or updated
enum ActionTaken {
  // Added
  ADDED = 0;
  // updated
  UPDATED = 1;
}

// Result of adding or updating
message AddOrUpdateMappingResponse {
  // Any errors
  repeated Error errors = 1;
  // Actions taken per column by name or index
  map<string, ActionTaken> ActionsTaken = 2;
}

//---------- list mappings ----------//

// Request to get all mappings fo a project
message ListMappingsRequest {
  // reference to project
  string project = 1;
}

// List of projects
message ListMappingsResponse {
  // Any errors
  repeated Error errors = 1;
  // Mappings, string is the column either by name (project is named) or index
  map<string, ColumnConfiguration> mappings = 2;
}

//---------- remove mapping(s) for project messages ----------//

message RemoveMappingRequest {
  // reference to project
  string project = 1;
  // which mapping(s) to remove
  repeated string mappings = 2;
}

// Result of removing mapping(s)
message RemoveMappingResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- add extra variable(s) ----------//

// add one or more extra variables
message AddExtraVariableRequest {
  // reference to project
  string project = 1;
  // Variables to add
  map<string,string> extra_variables = 2;
}

// Result of adding extra variable(s)
message AddExtraVariableResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- list mappings ----------//

// Request to get all mappings fo a project
message ListExtraVariablesRequest {
  // reference to project
  string project = 1;
}

// List of projects
message ListExtraVariablesResponse {
  // Any errors
  repeated Error errors = 1;
  // Extra variables, string is the name
  map<string,string> extra_variables = 2;
}

//---------- remove extra variable(s) for project messages ----------//

message RemoveExtraVariableRequest {
  // reference to project
  string project = 1;
  // which mapping(s) to remove
  repeated string extra_variables = 2;
}

// Result of removing mapping(s)
message RemoveExtraVariableResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- add calculated field(s) ----------//

// What kind of calculation takes part
enum Kind {
  // Run specific information such as record number or number of records
  APPLICATION = 0;
  // Date and time rendered
  DATETIME = 1;
  // Environment variables
  ENVRINMENT = 2;
  // Extra variable
  EXTRA = 3;
  // Map values to other values
  MAPPING = 4;
}

// Location to put calculated fiels
enum Location {
  // to each record
  RECORD = 0;
  // to documsnt, only has an effect when generating an array
  EOCUMENT = 1;
}

// describes a calculated field
message CalculatedField {
  // Kind denotes what kind of calculate has to be treated
  Kind kind = 1;
  // Format denotes a formatting value or the value to acquire
  string format = 2;
  // Type informa about the type represented
  FieldType type = 3;
  // Location specifies the location or context where the calculated field applies in the mapping.
  // Either document or record
  Location location = 4;
}

// Add one or more calculated fields to the project
message AddOrUpdateCalculatedFieldsRequest {
  // reference to project
  string project = 1;
  // field to add, string key is the field name
  map<string,CalculatedField> calculated_fields = 2;
}

// Response to add calculated fields
message AddOrUpdateCalculatedFieldsResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- remove calculated field(s) for project messages ----------//

message RemoveCalculatedFieldsRequest {
  // reference to project
  string project = 1;
  // which mapping(s) to remove
  repeated string calculated_fields = 2;
}

// Result of removing mapping(s)
message RemoveCalculatedFieldsResponse {
  // Any errors
  repeated Error errors = 1;
}

//---------- list mappings ----------//

// Request to get all mappings fo a project
message ListCalculatedFieldsRequest {
  // reference to project
  string project = 1;
}

// List of projects
message ListCalculatedFieldsResponse {
  // Any errors
  repeated Error errors = 1;
  // Calculated feilds, string is the field either by name (project is named) or index
  map<string,CalculatedField> calculated_fields = 2;
}